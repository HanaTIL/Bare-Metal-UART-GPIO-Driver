
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000828  08000828  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000828  08000828  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  08000828  08000828  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000828  08000828  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000828  08000828  00001828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800082c  0800082c  0000182c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000830  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          00000020  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001311  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000636  00000000  00000000  00003349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00003980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f7  00000000  00000000  00003ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7a5  00000000  00000000  00003bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002287  00000000  00000000  00022384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb885  00000000  00000000  0002460b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dfe90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003cc  00000000  00000000  000dfed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000e02a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000810 	.word	0x08000810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000810 	.word	0x08000810

080001c8 <SysTick_Handler>:


}

void SysTick_Handler()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/*Increment the counter*/
	current_ticks++;
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <SysTick_Handler+0x18>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	4a03      	ldr	r2, [pc, #12]	@ (80001e0 <SysTick_Handler+0x18>)
 80001d4:	6013      	str	r3, [r2, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	20000024 	.word	0x20000024

080001e4 <get_Ticks>:

uint32_t get_Ticks()
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	/*Return the counter value*/
	return current_ticks;
 80001e8:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <get_Ticks+0x14>)
 80001ea:	681b      	ldr	r3, [r3, #0]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000024 	.word	0x20000024

080001fc <main>:
#define RX



int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
#ifdef RX

	uint8_t rx_buffer[12];
#endif
/* Activer l'horloge pour USART2 */
	UART_ClockEnable(USART2);
 8000202:	4839      	ldr	r0, [pc, #228]	@ (80002e8 <main+0xec>)
 8000204:	f000 f8c6 	bl	8000394 <UART_ClockEnable>

/* Activer l'horloge pour les Port A et D */
	GPIO_ClockEnable(GPIOA);
 8000208:	4838      	ldr	r0, [pc, #224]	@ (80002ec <main+0xf0>)
 800020a:	f000 f90b 	bl	8000424 <GPIO_ClockEnable>
	GPIO_ClockEnable(GPIOD);
 800020e:	4838      	ldr	r0, [pc, #224]	@ (80002f0 <main+0xf4>)
 8000210:	f000 f908 	bl	8000424 <GPIO_ClockEnable>


/* --- Configuration GPIO ---*/
	GPIO_Init(GPIOA, AF, NPUPD, PP, Pin2);
 8000214:	2302      	movs	r3, #2
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2300      	movs	r3, #0
 800021a:	2200      	movs	r2, #0
 800021c:	2102      	movs	r1, #2
 800021e:	4833      	ldr	r0, [pc, #204]	@ (80002ec <main+0xf0>)
 8000220:	f000 f974 	bl	800050c <GPIO_Init>
	GPIO_Init(GPIOA, AF, PU, PP, Pin3);
 8000224:	2303      	movs	r3, #3
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2300      	movs	r3, #0
 800022a:	2201      	movs	r2, #1
 800022c:	2102      	movs	r1, #2
 800022e:	482f      	ldr	r0, [pc, #188]	@ (80002ec <main+0xf0>)
 8000230:	f000 f96c 	bl	800050c <GPIO_Init>
	GPIO_SetAlternate(GPIOA, Pin2, AF7);
 8000234:	2207      	movs	r2, #7
 8000236:	2102      	movs	r1, #2
 8000238:	482c      	ldr	r0, [pc, #176]	@ (80002ec <main+0xf0>)
 800023a:	f000 f9bd 	bl	80005b8 <GPIO_SetAlternate>
	GPIO_SetAlternate(GPIOA, Pin3, AF7);
 800023e:	2207      	movs	r2, #7
 8000240:	2103      	movs	r1, #3
 8000242:	482a      	ldr	r0, [pc, #168]	@ (80002ec <main+0xf0>)
 8000244:	f000 f9b8 	bl	80005b8 <GPIO_SetAlternate>
	GPIO_Init(GPIOD, OUTPUT, NPUPD, PP, Pin12);
 8000248:	230c      	movs	r3, #12
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	4827      	ldr	r0, [pc, #156]	@ (80002f0 <main+0xf4>)
 8000254:	f000 f95a 	bl	800050c <GPIO_Init>
	GPIO_Init(GPIOD, OUTPUT, NPUPD, PP, Pin13);
 8000258:	230d      	movs	r3, #13
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	2200      	movs	r2, #0
 8000260:	2101      	movs	r1, #1
 8000262:	4823      	ldr	r0, [pc, #140]	@ (80002f0 <main+0xf4>)
 8000264:	f000 f952 	bl	800050c <GPIO_Init>
	GPIO_Init(GPIOD, OUTPUT, NPUPD, PP, Pin14);
 8000268:	230e      	movs	r3, #14
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2300      	movs	r3, #0
 800026e:	2200      	movs	r2, #0
 8000270:	2101      	movs	r1, #1
 8000272:	481f      	ldr	r0, [pc, #124]	@ (80002f0 <main+0xf4>)
 8000274:	f000 f94a 	bl	800050c <GPIO_Init>
	GPIO_Init(GPIOD, OUTPUT, NPUPD, PP, Pin15);
 8000278:	230f      	movs	r3, #15
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2300      	movs	r3, #0
 800027e:	2200      	movs	r2, #0
 8000280:	2101      	movs	r1, #1
 8000282:	481b      	ldr	r0, [pc, #108]	@ (80002f0 <main+0xf4>)
 8000284:	f000 f942 	bl	800050c <GPIO_Init>
#ifdef TX
    UART_Init(USART2, 9600, TE);
#endif

#ifdef RX
    UART_Init(USART2, 9600, RE);
 8000288:	2202      	movs	r2, #2
 800028a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 800028e:	4816      	ldr	r0, [pc, #88]	@ (80002e8 <main+0xec>)
 8000290:	f000 f9f4 	bl	800067c <UART_Init>


	while(1)
	{

		GPIO_WriteBit(GPIOD, GPIO_Pin_15, 0x01);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800029a:	4815      	ldr	r0, [pc, #84]	@ (80002f0 <main+0xf4>)
 800029c:	f000 f9cf 	bl	800063e <GPIO_WriteBit>
		GPIO_WriteBit(GPIOD, GPIO_Pin_13, 0x01);
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a6:	4812      	ldr	r0, [pc, #72]	@ (80002f0 <main+0xf4>)
 80002a8:	f000 f9c9 	bl	800063e <GPIO_WriteBit>
#ifdef TX
        UART_SendBuffer(USART2,  tx_buffer, sizeof(tx_buffer));
#endif

#ifdef RX
        TypedefStatus status = UART_ReceiveBuffer(USART2, rx_buffer, sizeof(rx_buffer), 1000);
 80002ac:	4639      	mov	r1, r7
 80002ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002b2:	220c      	movs	r2, #12
 80002b4:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <main+0xec>)
 80002b6:	f000 fa2b 	bl	8000710 <UART_ReceiveBuffer>
 80002ba:	4603      	mov	r3, r0
 80002bc:	73fb      	strb	r3, [r7, #15]

        if (status == OK) {
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d106      	bne.n	80002d2 <main+0xd6>
            GPIO_WriteBit(GPIOD, GPIO_Pin_12, 0x01); // success LED
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002ca:	4809      	ldr	r0, [pc, #36]	@ (80002f0 <main+0xf4>)
 80002cc:	f000 f9b7 	bl	800063e <GPIO_WriteBit>
 80002d0:	e005      	b.n	80002de <main+0xe2>
        } else {
            GPIO_WriteBit(GPIOD, GPIO_Pin_14, 0x01); // error LED
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002d8:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <main+0xf4>)
 80002da:	f000 f9b0 	bl	800063e <GPIO_WriteBit>
        }
#endif

        Delay(0x4FFFFF);
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <main+0xf8>)
 80002e0:	f000 f80a 	bl	80002f8 <Delay>
	{
 80002e4:	e7d6      	b.n	8000294 <main+0x98>
 80002e6:	bf00      	nop
 80002e8:	40004400 	.word	0x40004400
 80002ec:	40020000 	.word	0x40020000
 80002f0:	40020c00 	.word	0x40020c00
 80002f4:	004fffff 	.word	0x004fffff

080002f8 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
void Delay(volatile unsigned  int  nCount)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000300:	e002      	b.n	8000308 <Delay+0x10>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3b01      	subs	r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f9      	bne.n	8000302 <Delay+0xa>
}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <NMI_Handler+0x4>

08000324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <MemManage_Handler+0x4>

08000334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <BusFault_Handler+0x4>

0800033c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <UsageFault_Handler+0x4>

08000344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <SystemInit+0x20>)
 8000376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800037a:	4a05      	ldr	r2, [pc, #20]	@ (8000390 <SystemInit+0x20>)
 800037c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <UART_ClockEnable>:
 * @param  uart_x: where x can be (2..5) to select the uart peripheral.
 * @retval None
 */

void UART_ClockEnable (USART_TypeDef * uart_x)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	 if (uart_x ==  USART2)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <UART_ClockEnable+0x7c>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d108      	bne.n	80003b6 <UART_ClockEnable+0x22>
	 {
		 *RCC_UART_Clock |= (1U<<17);
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <UART_ClockEnable+0x80>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <UART_ClockEnable+0x80>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80003b2:	601a      	str	r2, [r3, #0]
			 *RCC_UART_Clock |= (1U<<20);

	     }
	 }

}
 80003b4:	e025      	b.n	8000402 <UART_ClockEnable+0x6e>
	 else if (uart_x ==  USART3)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a17      	ldr	r2, [pc, #92]	@ (8000418 <UART_ClockEnable+0x84>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d108      	bne.n	80003d0 <UART_ClockEnable+0x3c>
		 *RCC_UART_Clock |= (1U<<18);
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <UART_ClockEnable+0x80>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <UART_ClockEnable+0x80>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	e018      	b.n	8000402 <UART_ClockEnable+0x6e>
	 else if (uart_x == UART4)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <UART_ClockEnable+0x88>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d108      	bne.n	80003ea <UART_ClockEnable+0x56>
		 *RCC_UART_Clock |= (1U<<19);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <UART_ClockEnable+0x80>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <UART_ClockEnable+0x80>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	e00b      	b.n	8000402 <UART_ClockEnable+0x6e>
		 if (uart_x == UART5)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000420 <UART_ClockEnable+0x8c>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d107      	bne.n	8000402 <UART_ClockEnable+0x6e>
			 *RCC_UART_Clock |= (1U<<20);
 80003f2:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <UART_ClockEnable+0x80>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <UART_ClockEnable+0x80>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000400:	601a      	str	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40004400 	.word	0x40004400
 8000414:	20000004 	.word	0x20000004
 8000418:	40004800 	.word	0x40004800
 800041c:	40004c00 	.word	0x40004c00
 8000420:	40005000 	.word	0x40005000

08000424 <GPIO_ClockEnable>:
 * @param  gpio_x: where x can be (A..G) to select the GPIO peripheral.
 * @retval None
 */

void GPIO_ClockEnable (GPIO_TypeDef * gpio_x)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	 if (gpio_x == GPIOA)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a2f      	ldr	r2, [pc, #188]	@ (80004ec <GPIO_ClockEnable+0xc8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d108      	bne.n	8000446 <GPIO_ClockEnable+0x22>
	 {
		 *RCC_GPIO_Clock |= (1U<<0);
 8000434:	4b2e      	ldr	r3, [pc, #184]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b2d      	ldr	r3, [pc, #180]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f042 0201 	orr.w	r2, r2, #1
 8000442:	601a      	str	r2, [r3, #0]
	     {
			 *RCC_GPIO_Clock |= (1U<<6);

	     }
     }
}
 8000444:	e04c      	b.n	80004e0 <GPIO_ClockEnable+0xbc>
	 else if (gpio_x == GPIOB)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a2a      	ldr	r2, [pc, #168]	@ (80004f4 <GPIO_ClockEnable+0xd0>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d108      	bne.n	8000460 <GPIO_ClockEnable+0x3c>
		 *RCC_GPIO_Clock |= (1U<<1);
 800044e:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f042 0202 	orr.w	r2, r2, #2
 800045c:	601a      	str	r2, [r3, #0]
}
 800045e:	e03f      	b.n	80004e0 <GPIO_ClockEnable+0xbc>
	 else if (gpio_x == GPIOC)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a25      	ldr	r2, [pc, #148]	@ (80004f8 <GPIO_ClockEnable+0xd4>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d108      	bne.n	800047a <GPIO_ClockEnable+0x56>
		 *RCC_GPIO_Clock |= (1U<<2);
 8000468:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f042 0204 	orr.w	r2, r2, #4
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	e032      	b.n	80004e0 <GPIO_ClockEnable+0xbc>
	 else if (gpio_x == GPIOD)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a1f      	ldr	r2, [pc, #124]	@ (80004fc <GPIO_ClockEnable+0xd8>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d108      	bne.n	8000494 <GPIO_ClockEnable+0x70>
		*RCC_GPIO_Clock |= (1<<3);
 8000482:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f042 0208 	orr.w	r2, r2, #8
 8000490:	601a      	str	r2, [r3, #0]
}
 8000492:	e025      	b.n	80004e0 <GPIO_ClockEnable+0xbc>
	 else if (gpio_x == GPIOE)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a1a      	ldr	r2, [pc, #104]	@ (8000500 <GPIO_ClockEnable+0xdc>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d108      	bne.n	80004ae <GPIO_ClockEnable+0x8a>
	 	*RCC_GPIO_Clock |= (1U<<4);
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f042 0210 	orr.w	r2, r2, #16
 80004aa:	601a      	str	r2, [r3, #0]
}
 80004ac:	e018      	b.n	80004e0 <GPIO_ClockEnable+0xbc>
	 else if (gpio_x == GPIOF)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a14      	ldr	r2, [pc, #80]	@ (8000504 <GPIO_ClockEnable+0xe0>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d108      	bne.n	80004c8 <GPIO_ClockEnable+0xa4>
	 	 *RCC_GPIO_Clock |= (1U<<5);
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f042 0220 	orr.w	r2, r2, #32
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	e00b      	b.n	80004e0 <GPIO_ClockEnable+0xbc>
		 if (gpio_x == GPIOG)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000508 <GPIO_ClockEnable+0xe4>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d107      	bne.n	80004e0 <GPIO_ClockEnable+0xbc>
			 *RCC_GPIO_Clock |= (1U<<6);
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <GPIO_ClockEnable+0xcc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80004de:	601a      	str	r2, [r3, #0]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40020000 	.word	0x40020000
 80004f0:	20000000 	.word	0x20000000
 80004f4:	40020400 	.word	0x40020400
 80004f8:	40020800 	.word	0x40020800
 80004fc:	40020c00 	.word	0x40020c00
 8000500:	40021000 	.word	0x40021000
 8000504:	40021400 	.word	0x40021400
 8000508:	40021800 	.word	0x40021800

0800050c <GPIO_Init>:
 * @retval None
 */


void GPIO_Init(GPIO_TypeDef * gpio_x, char Mode, char typeInput, char typeOutput, short int pin)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	4608      	mov	r0, r1
 8000516:	4611      	mov	r1, r2
 8000518:	461a      	mov	r2, r3
 800051a:	4603      	mov	r3, r0
 800051c:	70fb      	strb	r3, [r7, #3]
 800051e:	460b      	mov	r3, r1
 8000520:	70bb      	strb	r3, [r7, #2]
 8000522:	4613      	mov	r3, r2
 8000524:	707b      	strb	r3, [r7, #1]
	 unsigned int masque = ~(0x03 << (pin*2));
 8000526:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	2203      	movs	r2, #3
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	60fb      	str	r3, [r7, #12]
	 gpio_x->MODER &= masque;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	401a      	ands	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]
	 gpio_x->MODER |= (Mode << (pin*2));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	78f9      	ldrb	r1, [r7, #3]
 8000548:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800054c:	0052      	lsls	r2, r2, #1
 800054e:	fa01 f202 	lsl.w	r2, r1, r2
 8000552:	431a      	orrs	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
	 gpio_x->PUPDR &= masque;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	401a      	ands	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	60da      	str	r2, [r3, #12]
	 gpio_x->PUPDR |= (typeInput << (pin*2));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	78b9      	ldrb	r1, [r7, #2]
 800056a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	431a      	orrs	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	60da      	str	r2, [r3, #12]
	 if(typeOutput == PP)
 800057a:	787b      	ldrb	r3, [r7, #1]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10b      	bne.n	8000598 <GPIO_Init+0x8c>
	 {
		 gpio_x->OTYPER &= ~(0x1 << pin);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	43d2      	mvns	r2, r2
 8000590:	401a      	ands	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	605a      	str	r2, [r3, #4]
	 else
	 {
		 gpio_x->OTYPER |= (0x1 << pin);
	 }

}
 8000596:	e009      	b.n	80005ac <GPIO_Init+0xa0>
		 gpio_x->OTYPER |= (0x1 << pin);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	431a      	orrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <GPIO_SetAlternate>:
* @param  Af: can be AF0 .... AF15
* @retval None
*/

void GPIO_SetAlternate(GPIO_TypeDef *gpio_x, uint8_t pin, uint8_t Af)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
 80005c4:	4613      	mov	r3, r2
 80005c6:	70bb      	strb	r3, [r7, #2]
	if (pin < 8){
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	d818      	bhi.n	8000600 <GPIO_SetAlternate+0x48>
		unsigned int shift = pin*4;
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
		unsigned int masque = ~(0xF << (shift));
 80005d4:	220f      	movs	r2, #15
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	60bb      	str	r3, [r7, #8]
		gpio_x->AFRL &= masque;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6a1a      	ldr	r2, [r3, #32]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	401a      	ands	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	621a      	str	r2, [r3, #32]
		gpio_x->AFRL |= (Af << (shift));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6a1b      	ldr	r3, [r3, #32]
 80005f0:	78b9      	ldrb	r1, [r7, #2]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	431a      	orrs	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	621a      	str	r2, [r3, #32]
		gpio_x->AFRH &= masque;
		gpio_x->AFRH |= (Af << (shift));
	}


}
 80005fe:	e018      	b.n	8000632 <GPIO_SetAlternate+0x7a>
		unsigned int shift = (pin-8)*4;
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	3b08      	subs	r3, #8
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	617b      	str	r3, [r7, #20]
		unsigned int masque = ~(0xF << (shift));
 8000608:	220f      	movs	r2, #15
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	613b      	str	r3, [r7, #16]
		gpio_x->AFRH &= masque;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	401a      	ands	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
		gpio_x->AFRH |= (Af << (shift));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000624:	78b9      	ldrb	r1, [r7, #2]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	431a      	orrs	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <GPIO_WriteBit>:
 *     @arg Bit_RESET: to clear the port pin
 *     @arg Bit_SET: to set the port pin
 * @retval None
 */
 void GPIO_WriteBit(GPIO_TypeDef * gpio_x, unsigned  short int GPIO_Pin, char BitVal)
 {
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	707b      	strb	r3, [r7, #1]
	  if(BitVal != 0x0)
 800064e:	787b      	ldrb	r3, [r7, #1]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d006      	beq.n	8000662 <GPIO_WriteBit+0x24>
	  {
		  gpio_x->ODR |= GPIO_Pin;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	615a      	str	r2, [r3, #20]
	  else
	  {
		  gpio_x->ODR &= ~GPIO_Pin;

	  }
  }
 8000660:	e006      	b.n	8000670 <GPIO_WriteBit+0x32>
		  gpio_x->ODR &= ~GPIO_Pin;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	887a      	ldrh	r2, [r7, #2]
 8000668:	43d2      	mvns	r2, r2
 800066a:	401a      	ands	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	615a      	str	r2, [r3, #20]
  }
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <UART_Init>:
 * @param  Mode: can be TE, RE.
 * @retval None
 */

void UART_Init(USART_TypeDef * uart_x, unsigned int baud, char Mode)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	@ 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	4613      	mov	r3, r2
 8000688:	71fb      	strb	r3, [r7, #7]
	 uint32_t pclk = 8000000;
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <UART_Init+0x90>)
 800068c:	61fb      	str	r3, [r7, #28]
	 uint32_t usartdiv = pclk / (16 * baud);
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	fbb2 f3f3 	udiv	r3, r2, r3
 8000698:	61bb      	str	r3, [r7, #24]
	 uint32_t fraction = ( (pclk % (16 * baud)) * 16 ) / (16 * baud);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	011a      	lsls	r2, r3, #4
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80006a4:	fb01 f202 	mul.w	r2, r1, r2
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	011a      	lsls	r2, r3, #4
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b4:	617b      	str	r3, [r7, #20]
	 uint32_t brr = (usartdiv << 4) | (fraction & 0xF);
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	011a      	lsls	r2, r3, #4
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]

	 uart_x->BRR = brr;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	609a      	str	r2, [r3, #8]

	 if(Mode & TE){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d007      	beq.n	80006e4 <UART_Init+0x68>
		 uart_x->CR1 |= USART_CR1_UE | USART_CR1_TE;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	60d3      	str	r3, [r2, #12]
	 }
	 if (Mode & RE){
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <UART_Init+0x82>
		 uart_x->CR1 |= USART_CR1_UE | USART_CR1_RE;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	60d3      	str	r3, [r2, #12]
	 }

}
 80006fe:	bf00      	nop
 8000700:	3724      	adds	r7, #36	@ 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	007a1200 	.word	0x007a1200

08000710 <UART_ReceiveBuffer>:
 * @param  length: Amount of data elements to be received.
 * @retval None
 */

TypedefStatus UART_ReceiveBuffer(USART_TypeDef *uart_x, uint8_t *buffer, uint16_t length,  uint32_t timeout)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < length; i++)
 8000720:	2300      	movs	r3, #0
 8000722:	82fb      	strh	r3, [r7, #22]
 8000724:	e01d      	b.n	8000762 <UART_ReceiveBuffer+0x52>
    {
    	uint32_t Tick_start=get_Ticks();
 8000726:	f7ff fd5d 	bl	80001e4 <get_Ticks>
 800072a:	6138      	str	r0, [r7, #16]
        while (!(uart_x->SR & USART_SR_RXNE))
 800072c:	e009      	b.n	8000742 <UART_ReceiveBuffer+0x32>
        {
        	if(get_Ticks() - Tick_start > timeout)
 800072e:	f7ff fd59 	bl	80001e4 <get_Ticks>
 8000732:	4602      	mov	r2, r0
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	d201      	bcs.n	8000742 <UART_ReceiveBuffer+0x32>
        	{
        		return Error;
 800073e:	2301      	movs	r3, #1
 8000740:	e014      	b.n	800076c <UART_ReceiveBuffer+0x5c>
        while (!(uart_x->SR & USART_SR_RXNE))
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0ef      	beq.n	800072e <UART_ReceiveBuffer+0x1e>
        	}
        }
        buffer[i] = (uint8_t)(uart_x->DR & 0xFF); // Read one byte
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6859      	ldr	r1, [r3, #4]
 8000752:	8afb      	ldrh	r3, [r7, #22]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	b2ca      	uxtb	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afa      	ldrh	r2, [r7, #22]
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	429a      	cmp	r2, r3
 8000768:	d3dd      	bcc.n	8000726 <UART_ReceiveBuffer+0x16>
        /*GPIO_WriteBit(GPIOD, GPIO_Pin_12, 0x01);*/
    }
    return OK;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800077a:	490e      	ldr	r1, [pc, #56]	@ (80007b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800077c:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000790:	4c0b      	ldr	r4, [pc, #44]	@ (80007c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079e:	f7ff fde7 	bl	8000370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a2:	f000 f811 	bl	80007c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a6:	f7ff fd29 	bl	80001fc <main>
  bx  lr    
 80007aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80007b8:	08000830 	.word	0x08000830
  ldr r2, =_sbss
 80007bc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80007c0:	20000028 	.word	0x20000028

080007c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC_IRQHandler>
	...

080007c8 <__libc_init_array>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000800 <__libc_init_array+0x38>)
 80007cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000804 <__libc_init_array+0x3c>)
 80007ce:	1b64      	subs	r4, r4, r5
 80007d0:	10a4      	asrs	r4, r4, #2
 80007d2:	2600      	movs	r6, #0
 80007d4:	42a6      	cmp	r6, r4
 80007d6:	d109      	bne.n	80007ec <__libc_init_array+0x24>
 80007d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000808 <__libc_init_array+0x40>)
 80007da:	4c0c      	ldr	r4, [pc, #48]	@ (800080c <__libc_init_array+0x44>)
 80007dc:	f000 f818 	bl	8000810 <_init>
 80007e0:	1b64      	subs	r4, r4, r5
 80007e2:	10a4      	asrs	r4, r4, #2
 80007e4:	2600      	movs	r6, #0
 80007e6:	42a6      	cmp	r6, r4
 80007e8:	d105      	bne.n	80007f6 <__libc_init_array+0x2e>
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f0:	4798      	blx	r3
 80007f2:	3601      	adds	r6, #1
 80007f4:	e7ee      	b.n	80007d4 <__libc_init_array+0xc>
 80007f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fa:	4798      	blx	r3
 80007fc:	3601      	adds	r6, #1
 80007fe:	e7f2      	b.n	80007e6 <__libc_init_array+0x1e>
 8000800:	08000828 	.word	0x08000828
 8000804:	08000828 	.word	0x08000828
 8000808:	08000828 	.word	0x08000828
 800080c:	0800082c 	.word	0x0800082c

08000810 <_init>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	bf00      	nop
 8000814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000816:	bc08      	pop	{r3}
 8000818:	469e      	mov	lr, r3
 800081a:	4770      	bx	lr

0800081c <_fini>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	bf00      	nop
 8000820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000822:	bc08      	pop	{r3}
 8000824:	469e      	mov	lr, r3
 8000826:	4770      	bx	lr
